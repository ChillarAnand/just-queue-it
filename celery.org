#+AUTHOR: Anand Reddy Pandikunta

#+STARTUP: showall

#+OPTIONS: num:nil
#+OPTIONS: toc:nil reveal_mathjax:t

#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/2.5.0/

#+REVEAL_TRANS: linear
#+REVEAL-SLIDE-NUMBER: t
#+REVEAL_THEME: simple

#+BIND: org-confirm-babel-evaluate nil


* Just Queue It!

Queue Everything & Delight Everyone.


* What You Will Learn?

Fundamentals of task queue.


* What Is A Task Queue?

Taks Queue is a mechanism to distribute work across machines/threads.



* How Task Queue Works?


* A Simple Queue

#+BEGIN_SRC ditaa :file queue.png :cmdline -r

            Paying Cash At Shopping Mall

                                        +-------------+
                                        |             |
                                        |             |
            Shoppers ------------------>|   Cashier   |
                                        |             |
                                        |             |
                                        +-------------+

#+END_SRC

* A Simple Python Process

#+BEGIN_SRC ditaa :file python.png :cmdline -r

             Processing A Set Of Numbers

                                        +-------------+
                                        |             |
                                        |             |
             Numbers ------------------>|   Python    |
                                        |             |
                                        |             |
                                        +-------------+

#+END_SRC



* Token Based Queue System

#+BEGIN_SRC ditaa :file bank.png :cmdline -r

                     Paying Cash In A Bank

  +-----------------+
  |                 |
  |  Token Counter  |
  |                 |
  +-----------------+

                                 +----------------------------+
                                 |                            |
                                 |         Workers            |
                                 |                            |
                                 |      +-------------+       |
                                 |      |             |       |
                                 |      |  Cashier 1  |       |
                                 |      |             |       |
                                 |      +-------------+       |
                                 |                            |
                                 |      +-------------+       |
                                 |      |             |       |
                                 |      |  Cashier 2  |       |
                                 |      |             |       |
                                 |      +-------------+       |
                                 |                            |
                                 |      +-------------+       |
                                 |      |             |       |
                                 |      |  Cashier 3  |       |
                                 |      |             |       |
                                 |      +-------------+       |
                                 |                            |
                                 +----------------------------+

#+END_SRC



* A task queue

#+BEGIN_SRC ditaa :file celery.png :cmdline -r

                      Running A Task With Task Queue

  +-----------------+
  |                 |
  |     Broker      |
  |                 |
  +-----------------+

                                 +----------------------------+
                                 |                            |
                                 |         Workers            |
                                 |                            |
                                 |      +-------------+       |
                                 |      |             |       |
                                 |      |  Worker 1   |       |
                                 |      |             |       |
                                 |      +-------------+       |
                                 |                            |
                                 |      +-------------+       |
                                 |      |             |       |
                                 |      |  Worker 2   |       |
                                 |      |             |       |
                                 |      +-------------+       |
                                 |                            |
                                 |      +-------------+       |
                                 |      |             |       |
                                 |      |  Worker 3   |       |
                                 |      |             |       |
                                 |      +-------------+       |
                                 |                            |
                                 +----------------------------+

#+END_SRC



* Why Task Queues?



* Running Tasks In Background.


* Complete A Task With Retries.


* Concurrency, Autoscaling


* Scheduling Periodic Work.



* Task Queue Implementation.

Celery

RQ



* Celery

Itâ€™s a task queue with focus on real-time processing, while also supporting task scheduling.



* Getting Started

Install Celery.

Pick a broker & install it.

Create tasks & processing them.



* Supported Brokers

[[./brokers.png]]


* Which Broker?

Low volume tasks - Any broker.

High volume tasks - RabbitMQ or Redis.


* RabbitMQ

(Designed for messaging)

Advanced Routing.

Reliable delivery through acknowledgement.

Can push > 100k messages per second.


* Redis

(In memory data store)

Lightweight.

Blazing fast.


* A simple function

#+BEGIN_SRC python
# task.py
def add(x, y):
    return x + y
#+END_src

#+BEGIN_SRC python
# execute function
result = add(3, 4)
#+END_src


* Tasks

#+BEGIN_SRC python
# task.py
from celery import Celery

app = Celery('tasks', backend='amqp',
             broker='amqp://guest@localhost//')


@app.task()
def add(x, y):
    return x + y

#+END_src

#+BEGIN_SRC python
# add tasks into queue
async_result = add.apply_async([3, 4])
#+END_src


* Workers

#+BEGIN_SRC sh
celery worker --help  # all options

celery worker -A task -l info
#+END_src



* Results

#+BEGIN_SRC python
# check result
async_result.successful()
async_result.state
async_result.result
#+END_src


* Canvas Workflow

#+BEGIN_SRC python
add.s(2, 3)  # subtask - signature object

result = chain(add.s(2, 2), add.s(4))()  # chain

result = group(add.s(i, i) for i in range(10))()  # group

result = chord((add.s(i, i) for i in xrange(10)), xsum.s())()  # chord
#+END_src


* Routing


#+BEGIN_SRC python
# run tasks in queues

add.apply_async([1, 2], queue='add_queue')

sub.apply_async([3, 4], queue='sub_queue')


# run multiple workers

celery worker -l info -A tasks -Q add_queue

celery worker -l info -A tasks -Q sub_queue

#+END_src



* Monitoring.

#+BEGIN_SRC sh

# ping workers
celery inspect ping

# dump active tasks
celery inspect active

# dump queues being consumed
celery inspect active_queues

#+END_SRC


* Flower

Real-time monitor & web admin for Celery.



* Where To Go From Here?



* Questions?
